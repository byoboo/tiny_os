name: Pull Request Validation

on:
  pull_request:
    branches: [ master, dev ]
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Docker Environment
      run: |
        # Install Docker Compose
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
        # Verify Docker tools are available
        docker --version
        docker-compose --version
        
        # Build Docker development environment
        make setup
    
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-pr-${{ github.event.pull_request.head.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Code Quality Validation
      run: |
        # Format validation using Docker environment
        make format
        
        # Lint validation using Docker environment (strict mode)
        make lint-strict
    
    - name: Build Validation
      run: |
        # Build validation using Docker environment
        make build
        
        # Verify build artifacts
        make check-binary
    
    - name: Test Suite Validation
      run: |
        # Run comprehensive test suite using Docker environment
        make test
        
        # Run CI validation
        make validate-ci
    
    - name: Raspberry Pi Kernel Validation
      run: |
        # Generate kernel8.img using Docker environment
        make build-pi
        
        # Verify kernel binary
        if [ ! -f kernel8.img ]; then
          echo "‚ùå kernel8.img not generated"
          exit 1
        fi
        
        # Check binary size (should be reasonable for embedded kernel)
        SIZE=$(stat -c%s kernel8.img)
        echo "üìä Kernel size: $SIZE bytes"
        
        if [ $SIZE -gt 2097152 ]; then  # 2MB limit
          echo "‚ö†Ô∏è  Kernel size is quite large: $SIZE bytes"
        fi
        
        if [ $SIZE -lt 1024 ]; then  # 1KB minimum
          echo "‚ùå Kernel size too small: $SIZE bytes"
          exit 1
        fi
        
        echo "‚úÖ Kernel binary validation passed"
    
    - name: Check documentation
      run: |
        # Verify all documentation files exist
        docs=("README.md" "TECHNICAL_DOCS.md" "docs/TESTING_INFRASTRUCTURE.md" "docs/VSCODE_SETUP.md")
        for doc in "${docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "‚ùå Missing documentation: $doc"
            exit 1
          fi
        done
        echo "‚úÖ Documentation validation passed"
    
    - name: Analyze test coverage
      run: |
        echo "üìä Test Coverage Analysis"
        echo "========================"
        
        # Count test files
        TEST_COUNT=$(find tests/scripts/ -name "*.sh" -type f | wc -l)
        echo "Test scripts: $TEST_COUNT"
        
        # Check if all major components have tests
        components=("memory" "drivers" "filesystem" "comprehensive")
        for comp in "${components[@]}"; do
          if find tests/scripts/ -name "*${comp}*" -type f | grep -q .; then
            echo "‚úÖ $comp: Tests present"
          else
            echo "‚ö†Ô∏è  $comp: No dedicated tests found"
          fi
        done
    
    - name: Performance check
      run: |
        echo "üöÄ Performance Analysis"
        echo "======================"
        
        # Check binary size trends
        SIZE=$(stat -c%s kernel8.img)
        echo "Current kernel size: $SIZE bytes"
        
        # Build time analysis
        start_time=$(date +%s)
        cargo build --release --target aarch64-unknown-none
        end_time=$(date +%s)
        build_time=$((end_time - start_time))
        echo "Release build time: ${build_time}s"
    
    - name: Upload PR artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pr-build-${{ github.event.number }}
        path: |
          kernel8.img
          target/aarch64-unknown-none/release/tiny_os
        retention-days: 7
    
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get kernel size
          const kernelSize = fs.statSync('kernel8.img').size;
          
          // Create comment body
          const comment = `## üîç Pull Request Validation Results
          
          **‚úÖ All checks passed!**
          
          ### üìä Build Information
          - **Kernel Size**: ${kernelSize.toLocaleString()} bytes
          - **Target**: aarch64-unknown-none
          - **Build Type**: Release
          - **QEMU Tests**: ‚úÖ Passed
          
          ### üß™ Test Results
          - **Comprehensive Tests**: ‚úÖ Passed
          - **Modular Tests**: ‚úÖ Passed
          - **Integration Tests**: ‚úÖ Passed
          - **Boot Tests**: ‚úÖ Passed
          
          ### üìã Code Quality
          - **Formatting**: ‚úÖ Passed
          - **Clippy**: ‚úÖ Passed
          - **Documentation**: ‚úÖ Complete
          
          ### üöÄ Ready for Review
          This PR is ready for code review and merge consideration.
          
          **Artifacts**: [Download build artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Check for breaking changes
  breaking-changes:
    name: Breaking Changes Analysis
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: nightly
        targets: aarch64-unknown-none
    
    - name: Install cargo-semver-checks
      run: cargo install cargo-semver-checks
    
    - name: Check for breaking changes
      run: |
        echo "üîç Checking for breaking changes..."
        
        # This would check for API breaking changes
        # For now, we'll do a basic check
        echo "‚ö†Ô∏è  Manual review required for breaking changes"
        echo "Please ensure this PR doesn't break existing APIs"
        
        # Check if any major files were modified
        if git diff --name-only origin/master | grep -E "(lib.rs|main.rs|mod.rs)"; then
          echo "üö® Core files modified - review for breaking changes"
        fi
